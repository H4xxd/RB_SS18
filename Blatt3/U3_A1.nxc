#define SPEED 35

short events = 0;
typedef short EventType3
//EventType masks
#define LEFTTOUCHPRESSED 1;
#define RIGHTTOUCHPRESSED 2;
#define INFRAREDTRIGGERED 4;
#define TIMEREVENT 8;

bool left_pressed = false;
bool right_pressed = false;
bool fwd = true;

void setEvent(EventType ev){
  events |= ev;
}

void clearEvent(EventType ev){
  events &= ~ev;
}

bool eventIsPresent(EventType ev)
{
  if((events && ev) != 0){
    return true;
  }
  else{
    return false;
  }
}

task left_sensor(){
  int val_old = 0;
  while(true){
  int val_new = SensorValue(S4);
  if((val_old == 0 && val_new == 1)){
    left_pressed = true;
  }
  val_old = val_new;
  Wait(100);
  }
}

task right_sensor(){
  int val_old = 0;
  while(true){
  int val_new = SensorValue(S1);
  if((val_old == 0 && val_new == 1)){
    right_pressed = true;
  }
  val_old = val_new;
  Wait(100);
  }
}

task does_it_all(){
  long t0;
  int val_old_l = 0 ;
  int val_old_r = 0 ;
  while(true){
    if(left_pressed){
      if(fwd){
        OnFwd(OUT_AC,SPEED);
      }
      else{
        OnRev(OUT_AC,SPEED);
      }
      Wait(1000);
      Off(OUT_AC);
      left_pressed = false;
    }
    if(right_pressed){
      fwd = !fwd;
      right_pressed = false;
    }
  }
}

task main(){
  SetSensorTouch(IN_1);
  SetSensorTouch(IN_4);
  Precedes(left_sensor,right_sensor,does_it_all);
}
