#define SPEED 35    //Speed of the switched on motors
#define TURN_SPEED 35
#define MOTORS OUT_AC
#define MSPERDEGREE 11  //Time for 1 degree vong rotation at SPEED
#define MSBOXTOBOX 2000 //Time it takes the NXT to reach an adjacent box

//==STATEDEFINES================================================================
short currentState;
#define q3 0
#define q0 1
#define q1L 2
#define q1R 3
#define q2L 4
#define q2R 5
#define q3L 6
#define q3R 7
#define q4L 8
#define q4R 9
#define q5L 10
#define q5R 11
#define q6 12



//==EVENTS======================================================================
short events = 0;
typedef short EventType;
  //EventType masks
#define LEFTTOUCHPRESSED 1
#define RIGHTTOUCHPRESSED 2
#define INFRAREDTRIGGERED 4
#define STOPMOTOR 8
#define WAITINGTIMEEXCEEDED 16

  //Sets Event of Type ev
void setEvent(EventType ev){
  events |= ev;
}

  //Delets Event of Type ev
void clearEvent(EventType ev){
  events &= ~(ev);
}

  //Checks if Event of Type ev is present
#define eventIsPresent(ev) (events & ev)

//==TIMERS======================================================================
typedef unsigned int TimerType;
#define MAX_COUNT_TIMERS 10

#define TIMER_0 0
#define TIMER_1 1
#define TIMER_2 2
#define TIMER_3 3
#define TIMER_4 4
#define TIMER_5 5
#define TIMER_6 6
#define TIMER_7 7
#define TIMER_8 8
#define TIMER_9 9

  //Timer Struct
typedef struct{
  unsigned int duration;   //Duration of the timer in mSec
  unsigned long startTime; //Starting Time of the Timer
  EventType event;   //Event send at the end of the Timer
  bool isActive;   //True if Timer is active
}Timer;

  //Timer-Array to handle multiple Timers
Timer timers[MAX_COUNT_TIMERS]; //Timer Array of length MAX_COUNT_TIMERS

  //Sets a Timer t_id with a specific duration that sends an Event of Type ev
void setTimer(TimerType t_id,unsigned int duration_, EventType ev){
  timers[t_id].duration = duration_;
  timers[t_id].event = ev;
}

  //Starts Timer t_id if specified
void startTimer(TimerType t_id){
    timers[t_id].startTime = CurrentTick();
    timers[t_id].isActive = true;
}

  //Cancles Timer t_id
void cancleTimer(TimerType t_id){
  timers[t_id].isActive = false;
}

   //Checks all Timers of the exceeded
task checkTimers(){
  while(true){
  for(int i = 0 ; i < MAX_COUNT_TIMERS;i++){
    if(timers[i].isActive && (CurrentTick() - timers[i].startTime > timers[i].duration)){
      timers[i].isActive = false;
      setEvent(timers[i].event);
    }
  }
  Wait(1);
  }
}

void initTimers(){
  for(int i = 0; i < MAX_COUNT_TIMERS; i++){
    timers[i].isActive = false;
  }
}

void enableTimers(){
  initTimers();
  StartTask(checkTimers);
}

//==MOTIONCONTROL===============================================================

void turn(short degree){
 if(degree > 0){
  OnFwd(OUT_C, TURN_SPEED);
  OnRev(OUT_A, TURN_SPEED);
	Wait(MSPERDEGREE * degree);
 }else{
  OnFwd(OUT_A, TURN_SPEED);
  OnRev(OUT_C, TURN_SPEED);
   Wait(MSPERDEGREE * (-degree));
 }
}

void fwd(){
  OnFwd(OUT_AC, SPEED);
  Wait(MSBOXTOBOX);
}

//==SENSOR=REGISTRATION=========================================================
bool left_pressed = false;
bool right_pressed = false;

task left_sensor(){
  int val_old = 0;
  while(true){
  int val_new = SensorValue(S4);
  if((val_old == 0 && val_new == 1)){
    setEvent(LEFTTOUCHPRESSED);
  }
  val_old = val_new;
  Wait(100);
  }
}

task right_sensor(){
  int val_old = 0;
  while(true){
  int val_new = SensorValue(S1);
  if((val_old == 0 && val_new == 1)){
    setEvent(RIGHTTOUCHPRESSED);
  }
  val_old = val_new;
  Wait(100);
  }
}

//==STATEMACHINE================================================================

void leftPressed(){
	switch (currentState){
  	case q0:
			break;
  	case q1R:
			turn(180);
			fwd();
			currentState = q0;
			break;
  	case q1L:
			fwd();
			currentState = q0;
			break;
		case q2R:
			turn(180);
			fwd();
			currentState = q1L;
			break;
		case q2L:
			fwd();
			currentState = q1L;
			break;
		case q3R:
			turn(180);
			currentState = q2L;
			break;
		case q3L:
			fwd();
			currentState = q2L;
			break;
		case q4R:
			turn(180);
			fwd();
			currentState = q3L;
			break;
		case q4L:
			fwd();
			currentState = q3L;
			break;
		case q5R:
			turn(180);
			fwd();
			currentState = q4L;
			break;
		case q5L:
			fwd();
			currentState = q4L;
			break;
		case q6:
			turn(180);
			fwd();
			currentState = q5L;
			break;
		case q3:
			turn(-90);
			fwd();
			currentState = q2L;
			break;
		}
}

void rightPressed(){

	switch (currentState){
  	case q0:
			turn(180);
			fwd();
			break;
  	case q1R:
			fwd();
			currentState = q2R;
			break;
  	case q1L:
			turn(180);
			fwd();
			currentState = q2R;
			break;
		case q2R:
			fwd();
			currentState = q3R;
			break;
		case q2L:
			turn(180);
			fwd();
			currentState = q3R;
			break;
		case q3R:
			currentState = q4R;
			break;
		case q3L:
			turn(180);
			fwd();
			currentState = q4R;
			break;
		case q4R:
			fwd();
			currentState = q5R;
			break;
		case q4L:
			turn(180);
			fwd();
			currentState = q5R;
			break;
		case q5R:
			fwd();
			currentState = q6;
			break;
		case q5L:
			turn(180);
			fwd();
			currentState = q6;
			break;
		case q6:
			break;
		case q3:
			turn(90);
			fwd();
			currentState = q4R;
			break;
		}
}

void timerExceeded(){
  switch (currentState){
  	case q0:
	  	turn(180);
			repeat(3) fwd();
			turn (-90);
			break;
  	case q1R:
			repeat(2) fwd();
			turn(-90);
			break;
  	case q1L:
			turn(180);
			repeat(2) fwd();
			turn(-90);
			break;
		case q2R:
			fwd();
			turn(-90);
			break;
		case q2L:
			turn(180);
			fwd();
			turn(-90);
			break;
		case q3R:
			turn(-90);
			break;
		case q3L:
			turn(90);
			break;
		case q4R:
			turn(180);
			fwd();
			turn(90);
			break;
		case q4L:
			fwd();
			turn(90);
			break;
		case q5R:
			turn(180);
			repeat(2) fwd();
			turn(90);
			break;
		case q5L:
			repeat(2) fwd();
			turn(90);
			break;
		case q6:
			turn(180);
			repeat(3) fwd();
			turn(90);
			break;
		case q3:
			//wait some moa
			break;
  }
	//set new STATE
	currentState = q3;
}

//==Maincode====================================================================

task mainApp(){

	while(true){
		if(eventIsPresent(LEFTTOUCHPRESSED)){
			leftPressed();
			clearEvent(LEFTTOUCHPRESSED);
			startTimer(TIMER_0);

		}elseif(eventIsPresent(RIGHTTOUCHPRESSED)){
			rightPressed();
			clearEvent(RIGHTTOUCHPRESSED);
			startTimer(TIMER_0);

		}elseif(eventIsPresent(WAITINGTIMEEXCEEDED)){
			timerExceeded();
			clearEvent(WAITINGTIMEEXCEEDED);
		}
	Wait(10);
	}

}

task main(){
  SetSensorTouch(IN_1);
  SetSensorTouch(IN_4);
  enableTimers();
	currentState = q3;
  Precedes(left_sensor,right_sensor,mainApp);
}
