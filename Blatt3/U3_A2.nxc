#define SPEED 35    //Speed of the switched on motors
#define MOTORS OUT_AC

//==EVENTS======================================================================
short events = 0;
typedef short EventType;
  //EventType masks
#define LEFTTOUCHPRESSED 1
#define RIGHTTOUCHPRESSED 2
#define INFRAREDTRIGGERED 4
#define STOPMOTOR 8

  //Sets Event of Type ev
void setEvent(EventType ev){
  events |= ev;
}

  //Delets Event of Type ev
void clearEvent(EventType ev){
  events &= ~(ev);
}

  //Checks if Event of Type ev is present
#define eventIsPresent(ev) (events & ev)

//==TIMERS======================================================================
typedef unsigned int TimerType;
#define MAX_COUNT_TIMERS 10

#define TIMER_0 0
#define TIMER_1 1
#define TIMER_2 2
#define TIMER_3 3
#define TIMER_4 4
#define TIMER_5 5
#define TIMER_6 6
#define TIMER_7 7
#define TIMER_8 8
#define TIMER_9 9

  //Timer Struct
typedef struct{
  unsigned int duration;   //Duration of the timer in mSec
  unsigned long startTime; //Starting Time of the Timer
  EventType event;   //Event send at the end of the Timer
  bool isActive;   //True if Timer is active
}Timer;

  //Timer-Array to handle multiple Timers
Timer timers[MAX_COUNT_TIMERS]; //Timer Array of length MAX_COUNT_TIMERS

  //Sets a Timer t_id with a specific duration that sends an Event of Type ev
void setTimer(TimerType t_id,unsigned int duration_, EventType ev){
  timers[t_id].duration = duration_;
  timers[t_id].event = ev;
}

  //Starts Timer t_id if specified
void startTimer(TimerType t_id){
    timers[t_id].startTime = CurrentTick();
    timers[t_id].isActive = true;
}

  //Cancles Timer t_id
void cancleTimer(TimerType t_id){
  timers[t_id].isActive = false;
}

   //Checks all Timers of the exceeded
task checkTimers(){
  while(true){
  for(int i = 0 ; i < MAX_COUNT_TIMERS;i++){
    if(timers[i].isActive && (CurrentTick() - timers[i].startTime > timers[i].duration)){
      timers[i].isActive = false;
      setEvent(timers[i].event);
    }
  }
  Wait(1);
  }
}

void initTimers(){
  for(int i = 0; i < MAX_COUNT_TIMERS; i++){
    timers[i].isActive = false;
  }
}

void enableTimers(){
  initTimers();
  StartTask(checkTimers);
}

//==SENSOR=REGISTRATION=========================================================
bool left_pressed = false;
bool right_pressed = false;
bool fwd = true;

task left_sensor(){
  int val_old = 0;
  while(true){
  int val_new = SensorValue(S4);
  if((val_old == 0 && val_new == 1)){
    setEvent(LEFTTOUCHPRESSED);
  }
  val_old = val_new;
  Wait(100);
  }
}

task right_sensor(){
  int val_old = 0;
  while(true){
  int val_new = SensorValue(S1);
  if((val_old == 0 && val_new == 1)){
    setEvent(RIGHTTOUCHPRESSED);
  }
  val_old = val_new;
  Wait(100);
  }
}

task mainApp(){
  long t0;
  int val_old_l = 0 ;
  int val_old_r = 0 ;
  bool eventPresent = false;
  setTimer(TIMER_0,1000,STOPMOTOR);
  while(true){
    if(eventIsPresent(LEFTTOUCHPRESSED)){
      if(fwd){
        OnFwd(OUT_AC,SPEED);
      }
      else{
        OnRev(OUT_AC,SPEED);
      }
			startTimer(TIMER_0);
      clearEvent(LEFTTOUCHPRESSED);
    }
    if(eventIsPresent(RIGHTTOUCHPRESSED)){
      fwd = !fwd;
      clearEvent(RIGHTTOUCHPRESSED);
    }
    //Timer can be reset with aditional LEFTTOUCHPRESSED-Events
		if(eventIsPresent(STOPMOTOR)){
      Off(OUT_AC);
      clearEvent(STOPMOTOR);
    }
  }
}

task main(){
  SetSensorTouch(IN_1);
  SetSensorTouch(IN_4);
  enableTimers();
  Precedes(left_sensor,right_sensor,mainApp);
}
